if cond1 then
	block1
else if cond2
	block2
	if cond3
		block3
	else
		block4
	end if
else
	block5
end if

~~~~
if cond1 is const and true
=> 

block1

 'If' && .true. => remove IF and everything below and including the ELSE (IF) until and including the END IF

~~~~
if cond1 is const and false

 'If' && .false. => 

if cond2
	block2
else if cond3
	block3
else
	block4
end if

remove IF and anything before the first ELSE (IF) or END IF
change ELSE IF to IF
remove ELSE 

~~~~
if cond2 is const and true 

if cond1 then
	block1
else 
	block2
end if

ELSE IF && .true. => change to ELSE and remove any subsequent ELSE (IF) down to the END IF

~~~~
if cond2 is const and false 

if cond1 then
	block1
else if cond3
	block3
else
	block4
end if

ELSE IF && .false. => remove ELSE IF and anything up to next ELSE (IF) or END IF

~~~~
if cond3 is const and true => same as cond1 above

if cond1 then
	block1
else if cond2
	block2
else 
	block3
end if

~~~~
if cond3 is const and false 

if cond1 then
	block1
else if cond2
	block2
else 
	block4
end if

====

False means remove the IF, block and subsequent ELSE or END IF
True means remove the IF and the ELSE below the block; but the END IF depends on if there previously was a non-cond IF

We push 'If', 'IfTrue' or 'IfFalse' on the stack
When we meet an ELSE IF, then we pop; so we should only ever have one.
When we reach and END IF, if there is still an 'If' on the stack it means we need to keep the END IF

cond1 False
if cond0
BLOCK0
else [if cond1
BLOCK1
else] if cond2
BLOCK2
else
BLOCK3
end if

cond1 True
if cond0
BLOCK0
else [if cond1]
BLOCK1
[else if cond2
BLOCK2
else
BLOCK3]
end if

cond0 True
[if cond0]
BLOCK0
[else if cond1
BLOCK1
else if cond2
BLOCK2
else
BLOCK3
end if]

cond0 False
[if cond0
BLOCK0
else] if cond1
BLOCK1
else if cond2
BLOCK2
else
BLOCK3
end if

cond2 True
if cond0
BLOCK0 
else if cond1
BLOCK1
else [if cond2]
BLOCK2
[else
BLOCK3]
end if

No elseif:

cond0 True
[if cond0]
BLOCK0
[else 
BLOCK3
end if]


cond0 False
[if cond0
BLOCK0
else] 
BLOCK3
[end if]